{"/home/travis/build/npmtest/node-npmtest-ember-drag-drop/test.js":"/* istanbul instrument in package npmtest_ember_drag_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/lib.npmtest_ember_drag_drop.js":"/* istanbul instrument in package npmtest_ember_drag_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_drag_drop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_drag_drop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-drag-drop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_drag_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_drag_drop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_drag_drop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_drag_drop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_drag_drop.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_drag_drop.__dirname + '/lib.npmtest_ember_drag_drop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/index.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-drag-drop'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/components/draggable-object.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  dragCoordinator: Ember.inject.service(),\n  tagName: \"div\",\n  overrideClass: 'draggable-object',\n  classNameBindings: [':js-draggableObject','isDraggingObject:is-dragging-object:', 'overrideClass'],\n  attributeBindings: ['dragReady:draggable'],\n  isDraggable: true,\n  dragReady: true,\n  isSortable: false,\n  sortingScope: 'drag-objects',\n  title: Ember.computed.alias('content.title'),\n\n  draggable: Ember.computed('isDraggable', function() {\n    var isDraggable = this.get('isDraggable');\n\n    if (isDraggable) {\n      return true;\n    }\n    else {\n      return null;\n    }\n  }),\n\n  init() {\n    if (this.get('dragHandle')) {\n      this.set('dragReady', false);\n    }\n    this._super(...arguments);\n  },\n\n  didInsertElement() {\n    Ember.run.scheduleOnce('afterRender', ()=> {\n      let self = this;\n      //if there is a drag handle watch the mouse up and down events to trigger if drag is allowed\n      if (this.get('dragHandle')) {\n        //only start when drag handle is activated\n        if (this.$(this.get('dragHandle'))) {\n          this.$(this.get('dragHandle')).on('mouseover', function(){\n            self.set('dragReady', true);\n          });\n          this.$(this.get('dragHandle')).on('mouseout', function(){\n            self.set('dragReady', false);\n          });\n        }\n      }\n    });\n  },\n\n  willDestroyElement(){\n    if (this.$(this.get('dragHandle'))) {\n      this.$(this.get('dragHandle')).off();\n    }\n  },\n\n  dragStart(event) {\n    if (!this.get('isDraggable') || !this.get('dragReady')) {\n      event.preventDefault();\n      return;\n    }\n\n    var dataTransfer = event.dataTransfer;\n\n    var obj = this.get('content');\n    var id = null;\n    if (this.get('coordinator')) {\n       id = this.get('coordinator').setObject(obj, { source: this });\n    }\n\n\n    dataTransfer.setData('Text', id);\n\n    if (obj && typeof obj === 'object') {\n      Ember.set(obj, 'isDraggingObject', true);\n    }\n    this.set('isDraggingObject', true);\n    if (!this.get('dragCoordinator.enableSort') && this.get('dragCoordinator.sortComponentController')) {\n      //disable drag if sorting is disabled this is not used for regular\n      event.preventDefault();\n      return;\n    } else {\n      Ember.run.later(()=> {\n        this.dragStartHook(event);\n      });\n      this.get('dragCoordinator').dragStarted(obj, event, this);\n    }\n    this.sendAction('dragStartAction', obj, event);\n    if (this.get('isSortable')) {\n      this.sendAction('draggingSortItem', obj, event);\n    }\n  },\n\n  dragEnd(event) {\n    if (!this.get('isDraggingObject')) {\n      return;\n    }\n\n    var obj = this.get('content');\n\n    if (obj && typeof obj === 'object') {\n      Ember.set(obj, 'isDraggingObject', false);\n    }\n    this.set('isDraggingObject', false);\n    this.dragEndHook(event);\n    this.get('dragCoordinator').dragEnded();\n    this.sendAction('dragEndAction', obj, event);\n    if (this.get('dragHandle')) {\n      this.set('dragReady', false);\n    }\n  },\n\n  drag: function(event) {\n    this.sendAction('dragMoveAction', event);\n  },\n\n  dragOver(event) {\n   if (this.get('isSortable')) {\n     this.get('dragCoordinator').draggingOver(event, this);\n   }\n    return false;\n  },\n\n  dragStartHook(event) {\n    Ember.$(event.target).css('opacity', '0.5');\n  },\n\n  dragEndHook(event) {\n    Ember.$(event.target).css('opacity', '1');\n  },\n\n  drop(event) {\n    //Firefox is navigating to a url on drop, this prevents that from happening\n    event.preventDefault();\n  },\n\n  actions: {\n    selectForDrag() {\n      var obj = this.get('content');\n      var hashId = this.get('coordinator').setObject(obj, { source: this });\n      this.set('coordinator.clickedId', hashId);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/components/draggable-object-target.js":"import Ember from 'ember';\nimport Droppable from 'ember-drag-drop/mixins/droppable';\n\nexport default Ember.Component.extend(Droppable, {\n  classNameBindings: ['overrideClass'],\n  overrideClass: 'draggable-object-target',\n  isOver: false,\n\n  handlePayload: function(payload, event) {\n    var obj = this.get('coordinator').getObject(payload,{target: this});\n    this.sendAction('action',obj,{target: this, event: event});\n  },\n\n  handleDrop: function(event) {\n    var dataTransfer = event.dataTransfer;\n    var payload = dataTransfer.getData(\"Text\");\n    this.handlePayload(payload, event);\n  },\n\n  acceptDrop: function(event) {\n    this.handleDrop(event);\n    //Firefox is navigating to a url on drop sometimes, this prevents that from happening\n    event.preventDefault();\n  },\n  handleDragOver: function(event) {\n    if (!this.get('isOver')) {\n      //only send once per hover event\n      this.set('isOver', true);\n      this.sendAction('dragOverAction', event);\n    }\n  },\n  handleDragOut: function(event) {\n    this.set('isOver', false);\n    this.sendAction('dragOutAction', event);\n  },\n\n  click(e) {\n    let onClick = this.get('onClick');\n    if (onClick) {\n      onClick(e.originalEvent);\n    }\n  },\n\n  mouseDown(e) {\n    let mouseDown = this.get('onMouseDown');\n    if (mouseDown) {\n      mouseDown(e.originalEvent);\n    }\n  },\n\n  mouseEnter(e) {\n    let mouseEnter = this.get('onMouseEnter');\n    if (mouseEnter) {\n      mouseEnter(e.originalEvent);\n    }\n  },\n\n  actions: {\n    acceptForDrop: function() {\n      var hashId = this.get('coordinator.clickedId');\n      this.handlePayload(hashId);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/components/object-bin.js":"import Ember from 'ember';\n\nvar removeOne = function(arr,obj) {\n  var l = arr.get('length');\n  arr.removeObject(obj);\n  var l2 = arr.get('length');\n\n  if (l-1 !== l2) {\n    throw \"bad length \" + l + \" \" + l2;\n  }\n};\n\nexport default Ember.Component.extend( {\n  model: Ember.A(),\n  classNames: ['draggable-object-bin'],\n\n  manageList: true,\n\n  objectMoved: function() {\n  },\n\n  actions: {\n    handleObjectDropped: function(obj) {\n      if (this.get('manageList')) {\n        this.get(\"model\").pushObject(obj);\n      }\n\n      this.trigger(\"objectDroppedInternal\",obj);\n      this.sendAction(\"objectDropped\",{obj: obj, bin: this});\n    },\n\n    handleObjectDragged: function(obj) {\n      if (this.get('manageList')) {\n        removeOne(this.get('model'),obj);\n      }\n      this.trigger(\"objectDraggedInternal\",obj);\n      this.sendAction(\"objectDragged\");\n\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/components/sortable-objects.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend( {\n  dragCoordinator: Ember.inject.service(),\n  tagName: 'div',\n  overrideClass: 'sortable-objects',\n  classNameBindings: ['overrideClass'],\n  enableSort: true,\n  useSwap: true,\n  sortingScope: 'drag-objects',\n  sortableObjectList: Ember.A(),\n\n  init() {\n    this._super(...arguments);\n    if (this.get('enableSort')) {\n      this.get('dragCoordinator').pushSortComponent(this);\n    }\n  },\n\n  willDestroyElement() {\n    if (this.get('enableSort')) {\n      this.get('dragCoordinator').removeSortComponent(this);\n    }\n  },\n\n  dragStart: function() {\n    if (!this.get('enableSort')) {\n      return false;\n    }\n    this.set('dragCoordinator.sortComponentController', this);\n  },\n\n  dragOver: function() {\n    //needed so drop event will fire\n    return false;\n  },\n\n  drop: function(event) {\n    if (this.get('enableSort')) {\n      this.sendAction('sortEndAction', event);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/mixins/droppable.js":"import Ember from 'ember';\n\n/**\n * Wraps the native drop events to make your components droppable.\n *\n * @mixin Droppable\n */\n\nvar Droppable = Ember.Mixin.create({\n  _currentDrag: null,\n  classNameBindings: [\n    'accepts-drag',\n    'self-drop'\n  ],\n\n  /**\n   * Read-only className property that is set to true when the component is\n   * receiving a valid drag event. You can style your element with\n   * `.accepts-drag`.\n   *\n   * @property accepts-drag\n   * @private\n   */\n\n  'accepts-drag': false,\n\n  /**\n   * Will be true when the component is dragged over itself. Can use\n   * `.self-drop` in your css to style (or more common, unstyle) the component.\n   *\n   * @property self-drop\n   * @private\n   */\n\n  'self-drop': false,\n\n /**\n   * Validates drag events. Override this to restrict which data types your\n   * component accepts.\n   *\n   * Example:\n   *\n   * ```js\n   * validateDragEvent: function(event) {\n   *   return event.dataTransfer.types.contains('text/x-foo');\n   * }\n   * ```\n   *\n   * @method validateDragEvent\n   * @public\n   */\n\n  validateDragEvent: function() {\n    return true;\n  },\n\n  /**\n   * Called when a valid drag event is dropped on the component. Override to\n   * actually make something happen.\n   *\n   * ```js\n   * acceptDrop: function(event) {\n   *   var data = event.dataTransfer.getData('text/plain');\n   *   doSomethingWith(data);\n   * }\n   * ```\n   *\n   * @method acceptDrop\n   * @public\n   */\n\n  acceptDrop() {},\n\n  handleDragOver() {},\n  handleDragOut() {},\n\n  /**\n   * @method _handleDragOver\n   * @private\n   */\n\n  dragOver: function(event) {\n    if (this._droppableIsDraggable(event)) {\n      this.set('self-drop', true);\n    }\n    if (this.get('accepts-drag')) {\n      return this._allowDrop(event);\n    }\n    if (this.validateDragEvent(event)) {\n      this.set('accepts-drag', true);\n      this._allowDrop(event);\n    } else {\n      this._resetDroppability();\n    }\n  },\n\n  /**\n   * @method drop\n   * @private\n   */\n\n  drop: function(event) {\n    // have to validate on drop because you may have nested sortables the\n    // parent allows the drop but the child receives it, revalidating allows\n    // the event to bubble up to the parent to handle it\n    if (!this.validateDragEvent(event)) {\n      return;\n    }\n    this.acceptDrop(event);\n    this._resetDroppability();\n    // TODO: might not need this? I can't remember why its here\n    event.stopPropagation();\n    return false;\n  },\n\n  /**\n   * Tells the browser we have an acceptable drag event.\n   *\n   * @method _allowDrop\n   * @private\n   */\n\n  _allowDrop: function(event) {\n    this.handleDragOver(event);\n    event.stopPropagation();\n    event.preventDefault();\n    return false;\n  },\n\n  /**\n   * We want to be able to know if the current drop target is the original\n   * element being dragged or a child of it.\n   *\n   * @method _droppableIsDraggable\n   * @private\n   */\n\n  _droppableIsDraggable: function(event) {\n    return Droppable._currentDrag && (\n      Droppable._currentDrag === event.target ||\n      Droppable._currentDrag.contains(event.target)\n    );\n  },\n\n  /**\n   * @method _resetDroppability\n   * @private\n   */\n\n  _resetDroppability: function(event) {\n    this.handleDragOut(event);\n    this.set('accepts-drag', false);\n    this.set('self-drop', false);\n  },\n\n  dragLeave: function() {\n   this._resetDroppability();\n  },\n\n  // Need to track this so we can determine `self-drop`.\n  // It's on `Droppable` so we can test :\\\n  dragStart(event) {\n    this.set('_currentDrag', event.target);\n  }\n\n});\n\nexport default Droppable;\n\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/addon/services/drag-coordinator.js":"import Ember from 'ember';\n\nexport default Ember.Service.extend({\n  sortComponentController: null,\n  currentDragObject: null,\n  currentDragEvent: null,\n  currentDragItem: null,\n  currentOffsetItem: null,\n  isMoving: false,\n  lastEvent: null,\n  sortComponents: {}, // Use object for sortComponents so that we can scope per sortingScope\n\n  arrayList: Ember.computed.alias('sortComponentController.sortableObjectList'),\n  enableSort: Ember.computed.alias('sortComponentController.enableSort'),\n  useSwap: Ember.computed.alias('sortComponentController.useSwap'),\n  pushSortComponent(component) {\n    const sortingScope = component.get('sortingScope');\n    if (!this.get('sortComponents')[sortingScope]) {\n      this.get('sortComponents')[sortingScope] = Ember.A();\n    }\n    this.get('sortComponents')[sortingScope].pushObject(component);\n  },\n\n  removeSortComponent(component) {\n    const sortingScope = component.get('sortingScope');\n    this.get('sortComponents')[sortingScope].removeObject(component);\n  },\n\n  dragStarted(object, event, emberObject) {\n    this.set('currentDragObject', object);\n    this.set('currentDragEvent', event);\n    this.set('currentDragItem', emberObject);\n    event.dataTransfer.effectAllowed = 'move';\n  },\n\n  dragEnded() {\n    this.set('currentDragObject', null);\n    this.set('currentDragEvent', null);\n    this.set('currentDragItem', null);\n    this.set('currentOffsetItem', null);\n  },\n\n  draggingOver(event, emberObject) {\n    const currentOffsetItem = this.get('currentOffsetItem');\n    const pos = this.relativeClientPosition(emberObject.$()[0], event);\n    const hasSameSortingScope = this.get('currentDragItem.sortingScope') === emberObject.get('sortingScope');\n    let moveDirection = false;\n\n    if (!this.get('lastEvent')) {\n      this.set('lastEvent', event);\n    }\n\n    if (event.originalEvent.clientY < this.get('lastEvent').originalEvent.clientY) {\n      moveDirection = 'up';\n    }\n\n    if (event.originalEvent.clientY > this.get('lastEvent').originalEvent.clientY) {\n      moveDirection = 'down';\n    }\n\n    this.set('lastEvent', event);\n\n    if (!this.get('isMoving')) {\n      if (event.target !== this.get('currentDragEvent').target && hasSameSortingScope) { //if not dragging over self\n        if (currentOffsetItem !== emberObject) {\n          if (pos.py > 0.33 && moveDirection === 'up' || pos.py > 0.33 && moveDirection === 'down') {\n\n            this.moveElements(emberObject);\n            this.set('currentOffsetItem', emberObject);\n          }\n        }\n      } else {\n        //reset because the node moved under the mouse with a move\n        this.set('currentOffsetItem', null);\n      }\n    }\n  },\n\n  moveObjectPositions(a, b, sortComponents) {\n    const aSortable = sortComponents.find((component) => {\n      return component.get('sortableObjectList').find((sortable) => {\n        return sortable === a;\n      });\n    });\n    const bSortable = sortComponents.find((component) => {\n      return component.get('sortableObjectList').find((sortable) => {\n        return sortable === b;\n      });\n    });\n    const swap = aSortable === bSortable;\n\n    if (swap) {\n\n      if (this.get('useSwap')) {\n        //use swap algorithm\n        // Swap if items are in the same sortable-objects component\n        const newList = aSortable.get('sortableObjectList').toArray();\n        const newArray = Ember.A();\n        const aPos = newList.indexOf(a);\n        const bPos = newList.indexOf(b);\n\n        newList[aPos] = b;\n        newList[bPos] = a;\n\n        newList.forEach(function(item) {\n          newArray.push(item);\n        });\n        aSortable.set('sortableObjectList', newArray);\n\n      } else {\n        //use shift algorithm\n        const newList = aSortable.get('sortableObjectList').toArray();\n        var newArray = Ember.A();\n        var aPos = newList.indexOf(a);\n        var bPos = newList.indexOf(b);\n\n        newList.splice(aPos, 1);\n        newList.splice(bPos, 0, a);\n\n        newList.forEach(function(item){\n          newArray.push(item);\n        });\n\n        aSortable.set('sortableObjectList', newArray);\n      }\n\n\n    } else {\n      // Move if items are in different sortable-objects component\n      const aList = aSortable.get('sortableObjectList');\n      const bList = bSortable.get('sortableObjectList');\n\n      // Remove from aList and insert into bList\n      aList.removeObject(a);\n      bList.insertAt(bList.indexOf(b), a);\n    }\n  },\n\n  moveElements(overElement) {\n    const isEnabled = Object.keys(this.get('sortComponents')).length;\n    const draggingItem = this.get('currentDragItem');\n    const sortComponents = this.get('sortComponents')[draggingItem.get('sortingScope')];\n\n    if (!isEnabled) {\n      return;\n    }\n\n    this.moveObjectPositions(draggingItem.get('content'), overElement.get('content'), sortComponents);\n\n    sortComponents.forEach((component) => {\n      component.rerender();\n    });\n  },\n\n  relativeClientPosition(el, event) {\n    const rect = el.getBoundingClientRect();\n    const x = event.originalEvent.clientX - rect.left;\n    const y = event.originalEvent.clientY - rect.top;\n\n    return {\n      x: x,\n      y: y,\n      px: x / rect.width,\n      py: y / rect.height\n    };\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/app/initializers/coordinator-setup.js":"import Coordinator from '../models/coordinator';\n\nexport default {\n  name: \"setup coordinator\",\n\n  initialize: function() {\n    let app = arguments[1] || arguments[0];\n    app.register(\"drag:coordinator\",Coordinator);\n    app.inject(\"component\",\"coordinator\",\"drag:coordinator\");\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/app/models/coordinator.js":"import Ember from 'ember';\nimport ObjHash from './obj-hash';\n\nexport default Ember.Object.extend(Ember.Evented, {\n  objectMap: Ember.computed(function() {\n    return ObjHash.create();\n  }),\n\n  getObject: function(id,ops) {\n    ops = ops || {};\n    var payload = this.get('objectMap').getObj(id);\n\n    if (payload.ops.source) {\n      payload.ops.source.sendAction('action',payload.obj);\n    }\n\n    if (payload.ops.target) {\n      payload.ops.target.sendAction('action',payload.obj);\n    }\n\n    this.trigger(\"objectMoved\", {obj: payload.obj, source: payload.ops.source, target: ops.target});\n\n    return payload.obj;\n  },\n\n  setObject: function(obj,ops) {\n    ops = ops || {};\n    return this.get('objectMap').add({obj: obj, ops: ops});\n  }\n});","/home/travis/build/npmtest/node-npmtest-ember-drag-drop/node_modules/ember-drag-drop/app/models/obj-hash.js":"import Ember from 'ember';\n\nexport default Ember.Object.extend({\n  content: {},\n  contentLength: 0,\n  length: Ember.computed.alias('contentLength'),\n\n  add: function(obj) {\n    var id = this.generateId();\n    this.get('content')[id] = obj;\n    this.incrementProperty(\"contentLength\");\n    return id;\n  },\n\n  getObj: function(key) {\n    var res = this.get('content')[key];\n    if (!res) {\n      throw \"no obj for key \"+key;\n    }\n    return res;\n  },\n\n  generateId: function() {\n    var num = Math.random() * 1000000000000.0;\n    num = parseInt(num);\n    num = \"\"+num;\n    return num;\n  },\n\n  keys: function() {\n    var res = [];\n    for (var key in this.get('content')) {\n      res.push(key);\n    }\n    return Ember.A(res);\n  },\n\n\n});"}